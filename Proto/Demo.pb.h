// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Demo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Demo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Demo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Demo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Demo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Demo_2eproto;
class Addreq;
class AddreqDefaultTypeInternal;
extern AddreqDefaultTypeInternal _Addreq_default_instance_;
class Addres;
class AddresDefaultTypeInternal;
extern AddresDefaultTypeInternal _Addres_default_instance_;
class Attributeitempro;
class AttributeitemproDefaultTypeInternal;
extern AttributeitemproDefaultTypeInternal _Attributeitempro_default_instance_;
class Dbrequest;
class DbrequestDefaultTypeInternal;
extern DbrequestDefaultTypeInternal _Dbrequest_default_instance_;
class Packagepro;
class PackageproDefaultTypeInternal;
extern PackageproDefaultTypeInternal _Packagepro_default_instance_;
class Packagereq;
class PackagereqDefaultTypeInternal;
extern PackagereqDefaultTypeInternal _Packagereq_default_instance_;
class Packageres;
class PackageresDefaultTypeInternal;
extern PackageresDefaultTypeInternal _Packageres_default_instance_;
class Redisplayerinfo;
class RedisplayerinfoDefaultTypeInternal;
extern RedisplayerinfoDefaultTypeInternal _Redisplayerinfo_default_instance_;
class Reqest;
class ReqestDefaultTypeInternal;
extern ReqestDefaultTypeInternal _Reqest_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Addreq* Arena::CreateMaybeMessage<::Addreq>(Arena*);
template<> ::Addres* Arena::CreateMaybeMessage<::Addres>(Arena*);
template<> ::Attributeitempro* Arena::CreateMaybeMessage<::Attributeitempro>(Arena*);
template<> ::Dbrequest* Arena::CreateMaybeMessage<::Dbrequest>(Arena*);
template<> ::Packagepro* Arena::CreateMaybeMessage<::Packagepro>(Arena*);
template<> ::Packagereq* Arena::CreateMaybeMessage<::Packagereq>(Arena*);
template<> ::Packageres* Arena::CreateMaybeMessage<::Packageres>(Arena*);
template<> ::Redisplayerinfo* Arena::CreateMaybeMessage<::Redisplayerinfo>(Arena*);
template<> ::Reqest* Arena::CreateMaybeMessage<::Reqest>(Arena*);
template<> ::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Reqest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Reqest) */ {
 public:
  inline Reqest() : Reqest(nullptr) {}
  virtual ~Reqest();

  Reqest(const Reqest& from);
  Reqest(Reqest&& from) noexcept
    : Reqest() {
    *this = ::std::move(from);
  }

  inline Reqest& operator=(const Reqest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reqest& operator=(Reqest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reqest& default_instance();

  static inline const Reqest* internal_default_instance() {
    return reinterpret_cast<const Reqest*>(
               &_Reqest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reqest& a, Reqest& b) {
    a.Swap(&b);
  }
  inline void Swap(Reqest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reqest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reqest* New() const final {
    return CreateMaybeMessage<Reqest>(nullptr);
  }

  Reqest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reqest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reqest& from);
  void MergeFrom(const Reqest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reqest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Reqest";
  }
  protected:
  explicit Reqest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // required string Name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string Password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required string Message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:Reqest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string Message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required int32 Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Response)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Dbrequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Dbrequest) */ {
 public:
  inline Dbrequest() : Dbrequest(nullptr) {}
  virtual ~Dbrequest();

  Dbrequest(const Dbrequest& from);
  Dbrequest(Dbrequest&& from) noexcept
    : Dbrequest() {
    *this = ::std::move(from);
  }

  inline Dbrequest& operator=(const Dbrequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dbrequest& operator=(Dbrequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dbrequest& default_instance();

  static inline const Dbrequest* internal_default_instance() {
    return reinterpret_cast<const Dbrequest*>(
               &_Dbrequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Dbrequest& a, Dbrequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Dbrequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dbrequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dbrequest* New() const final {
    return CreateMaybeMessage<Dbrequest>(nullptr);
  }

  Dbrequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dbrequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dbrequest& from);
  void MergeFrom(const Dbrequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dbrequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Dbrequest";
  }
  protected:
  explicit Dbrequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
    kUidFieldNumber = 2,
    kEltemtypeFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // required int32 Operation = 1;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::PROTOBUF_NAMESPACE_ID::int32 operation() const;
  void set_operation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operation() const;
  void _internal_set_operation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Eltemtype = 3;
  bool has_eltemtype() const;
  private:
  bool _internal_has_eltemtype() const;
  public:
  void clear_eltemtype();
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype() const;
  void set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eltemtype() const;
  void _internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Dbrequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 operation_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Addreq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Addreq) */ {
 public:
  inline Addreq() : Addreq(nullptr) {}
  virtual ~Addreq();

  Addreq(const Addreq& from);
  Addreq(Addreq&& from) noexcept
    : Addreq() {
    *this = ::std::move(from);
  }

  inline Addreq& operator=(const Addreq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Addreq& operator=(Addreq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Addreq& default_instance();

  static inline const Addreq* internal_default_instance() {
    return reinterpret_cast<const Addreq*>(
               &_Addreq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Addreq& a, Addreq& b) {
    a.Swap(&b);
  }
  inline void Swap(Addreq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Addreq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Addreq* New() const final {
    return CreateMaybeMessage<Addreq>(nullptr);
  }

  Addreq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Addreq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Addreq& from);
  void MergeFrom(const Addreq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Addreq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Addreq";
  }
  protected:
  explicit Addreq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEltemattributetypeFieldNumber = 9,
    kEltemattributevalueFieldNumber = 10,
    kEltemtypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kUidFieldNumber = 3,
    kIdFieldNumber = 4,
    kPosFieldNumber = 6,
    kUsemoneyFieldNumber = 5,
    kInuseFieldNumber = 7,
    kDropfromFieldNumber = 8,
  };
  // repeated int32 Eltemattributetype = 9;
  int eltemattributetype_size() const;
  private:
  int _internal_eltemattributetype_size() const;
  public:
  void clear_eltemattributetype();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eltemattributetype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_eltemattributetype() const;
  void _internal_add_eltemattributetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_eltemattributetype();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 eltemattributetype(int index) const;
  void set_eltemattributetype(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_eltemattributetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      eltemattributetype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_eltemattributetype();

  // repeated int32 Eltemattributevalue = 10;
  int eltemattributevalue_size() const;
  private:
  int _internal_eltemattributevalue_size() const;
  public:
  void clear_eltemattributevalue();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eltemattributevalue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_eltemattributevalue() const;
  void _internal_add_eltemattributevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_eltemattributevalue();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 eltemattributevalue(int index) const;
  void set_eltemattributevalue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_eltemattributevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      eltemattributevalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_eltemattributevalue();

  // required int32 Eltemtype = 1;
  bool has_eltemtype() const;
  private:
  bool _internal_has_eltemtype() const;
  public:
  void clear_eltemtype();
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype() const;
  void set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eltemtype() const;
  void _internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Uid = 3;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Pos = 6;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool Usemoney = 5;
  bool has_usemoney() const;
  private:
  bool _internal_has_usemoney() const;
  public:
  void clear_usemoney();
  bool usemoney() const;
  void set_usemoney(bool value);
  private:
  bool _internal_usemoney() const;
  void _internal_set_usemoney(bool value);
  public:

  // optional bool Inuse = 7;
  bool has_inuse() const;
  private:
  bool _internal_has_inuse() const;
  public:
  void clear_inuse();
  bool inuse() const;
  void set_inuse(bool value);
  private:
  bool _internal_inuse() const;
  void _internal_set_inuse(bool value);
  public:

  // optional bool Dropfrom = 8;
  bool has_dropfrom() const;
  private:
  bool _internal_has_dropfrom() const;
  public:
  void clear_dropfrom();
  bool dropfrom() const;
  void set_dropfrom(bool value);
  private:
  bool _internal_dropfrom() const;
  void _internal_set_dropfrom(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Addreq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > eltemattributetype_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > eltemattributevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  bool usemoney_;
  bool inuse_;
  bool dropfrom_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Addres PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Addres) */ {
 public:
  inline Addres() : Addres(nullptr) {}
  virtual ~Addres();

  Addres(const Addres& from);
  Addres(Addres&& from) noexcept
    : Addres() {
    *this = ::std::move(from);
  }

  inline Addres& operator=(const Addres& from) {
    CopyFrom(from);
    return *this;
  }
  inline Addres& operator=(Addres&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Addres& default_instance();

  static inline const Addres* internal_default_instance() {
    return reinterpret_cast<const Addres*>(
               &_Addres_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Addres& a, Addres& b) {
    a.Swap(&b);
  }
  inline void Swap(Addres* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Addres* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Addres* New() const final {
    return CreateMaybeMessage<Addres>(nullptr);
  }

  Addres* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Addres>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Addres& from);
  void MergeFrom(const Addres& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Addres* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Addres";
  }
  protected:
  explicit Addres(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckFieldNumber = 1,
  };
  // required int32 Ack = 1;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  ::PROTOBUF_NAMESPACE_ID::int32 ack() const;
  void set_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ack() const;
  void _internal_set_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Addres)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ack_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Packagereq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packagereq) */ {
 public:
  inline Packagereq() : Packagereq(nullptr) {}
  virtual ~Packagereq();

  Packagereq(const Packagereq& from);
  Packagereq(Packagereq&& from) noexcept
    : Packagereq() {
    *this = ::std::move(from);
  }

  inline Packagereq& operator=(const Packagereq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packagereq& operator=(Packagereq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packagereq& default_instance();

  static inline const Packagereq* internal_default_instance() {
    return reinterpret_cast<const Packagereq*>(
               &_Packagereq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Packagereq& a, Packagereq& b) {
    a.Swap(&b);
  }
  inline void Swap(Packagereq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packagereq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packagereq* New() const final {
    return CreateMaybeMessage<Packagereq>(nullptr);
  }

  Packagereq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packagereq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packagereq& from);
  void MergeFrom(const Packagereq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packagereq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packagereq";
  }
  protected:
  explicit Packagereq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kInitFieldNumber = 2,
  };
  // required int32 Uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Init = 2;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  ::PROTOBUF_NAMESPACE_ID::int32 init() const;
  void set_init(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_init() const;
  void _internal_set_init(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Packagereq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 init_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Packageres PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packageres) */ {
 public:
  inline Packageres() : Packageres(nullptr) {}
  virtual ~Packageres();

  Packageres(const Packageres& from);
  Packageres(Packageres&& from) noexcept
    : Packageres() {
    *this = ::std::move(from);
  }

  inline Packageres& operator=(const Packageres& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packageres& operator=(Packageres&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packageres& default_instance();

  static inline const Packageres* internal_default_instance() {
    return reinterpret_cast<const Packageres*>(
               &_Packageres_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Packageres& a, Packageres& b) {
    a.Swap(&b);
  }
  inline void Swap(Packageres* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packageres* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packageres* New() const final {
    return CreateMaybeMessage<Packageres>(nullptr);
  }

  Packageres* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packageres>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packageres& from);
  void MergeFrom(const Packageres& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packageres* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packageres";
  }
  protected:
  explicit Packageres(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // repeated int32 Num = 1;
  int num_size() const;
  private:
  int _internal_num_size() const;
  public:
  void clear_num();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_num() const;
  void _internal_add_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_num();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 num(int index) const;
  void set_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_num();

  // @@protoc_insertion_point(class_scope:Packageres)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Attributeitempro PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Attributeitempro) */ {
 public:
  inline Attributeitempro() : Attributeitempro(nullptr) {}
  virtual ~Attributeitempro();

  Attributeitempro(const Attributeitempro& from);
  Attributeitempro(Attributeitempro&& from) noexcept
    : Attributeitempro() {
    *this = ::std::move(from);
  }

  inline Attributeitempro& operator=(const Attributeitempro& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attributeitempro& operator=(Attributeitempro&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attributeitempro& default_instance();

  static inline const Attributeitempro* internal_default_instance() {
    return reinterpret_cast<const Attributeitempro*>(
               &_Attributeitempro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Attributeitempro& a, Attributeitempro& b) {
    a.Swap(&b);
  }
  inline void Swap(Attributeitempro* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attributeitempro* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attributeitempro* New() const final {
    return CreateMaybeMessage<Attributeitempro>(nullptr);
  }

  Attributeitempro* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attributeitempro>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attributeitempro& from);
  void MergeFrom(const Attributeitempro& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attributeitempro* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Attributeitempro";
  }
  protected:
  explicit Attributeitempro(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 4,
    kIdFieldNumber = 1,
    kAmountFieldNumber = 2,
    kEltemtypeFieldNumber = 3,
  };
  // repeated int32 attribute = 4;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attribute(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_attribute() const;
  void _internal_add_attribute(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_attribute();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 attribute(int index) const;
  void set_attribute(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attribute(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      attribute() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_attribute();

  // required int32 Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Eltemtype = 3;
  bool has_eltemtype() const;
  private:
  bool _internal_has_eltemtype() const;
  public:
  void clear_eltemtype();
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype() const;
  void set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eltemtype() const;
  void _internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Attributeitempro)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > attribute_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Packagepro PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packagepro) */ {
 public:
  inline Packagepro() : Packagepro(nullptr) {}
  virtual ~Packagepro();

  Packagepro(const Packagepro& from);
  Packagepro(Packagepro&& from) noexcept
    : Packagepro() {
    *this = ::std::move(from);
  }

  inline Packagepro& operator=(const Packagepro& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packagepro& operator=(Packagepro&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packagepro& default_instance();

  static inline const Packagepro* internal_default_instance() {
    return reinterpret_cast<const Packagepro*>(
               &_Packagepro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Packagepro& a, Packagepro& b) {
    a.Swap(&b);
  }
  inline void Swap(Packagepro* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packagepro* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packagepro* New() const final {
    return CreateMaybeMessage<Packagepro>(nullptr);
  }

  Packagepro* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packagepro>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packagepro& from);
  void MergeFrom(const Packagepro& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packagepro* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packagepro";
  }
  protected:
  explicit Packagepro(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemproFieldNumber = 1,
  };
  // repeated .Attributeitempro Itempro = 1;
  int itempro_size() const;
  private:
  int _internal_itempro_size() const;
  public:
  void clear_itempro();
  ::Attributeitempro* mutable_itempro(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >*
      mutable_itempro();
  private:
  const ::Attributeitempro& _internal_itempro(int index) const;
  ::Attributeitempro* _internal_add_itempro();
  public:
  const ::Attributeitempro& itempro(int index) const;
  ::Attributeitempro* add_itempro();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >&
      itempro() const;

  // @@protoc_insertion_point(class_scope:Packagepro)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro > itempro_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Redisplayerinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Redisplayerinfo) */ {
 public:
  inline Redisplayerinfo() : Redisplayerinfo(nullptr) {}
  virtual ~Redisplayerinfo();

  Redisplayerinfo(const Redisplayerinfo& from);
  Redisplayerinfo(Redisplayerinfo&& from) noexcept
    : Redisplayerinfo() {
    *this = ::std::move(from);
  }

  inline Redisplayerinfo& operator=(const Redisplayerinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Redisplayerinfo& operator=(Redisplayerinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Redisplayerinfo& default_instance();

  static inline const Redisplayerinfo* internal_default_instance() {
    return reinterpret_cast<const Redisplayerinfo*>(
               &_Redisplayerinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Redisplayerinfo& a, Redisplayerinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Redisplayerinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Redisplayerinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Redisplayerinfo* New() const final {
    return CreateMaybeMessage<Redisplayerinfo>(nullptr);
  }

  Redisplayerinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Redisplayerinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Redisplayerinfo& from);
  void MergeFrom(const Redisplayerinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Redisplayerinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Redisplayerinfo";
  }
  protected:
  explicit Redisplayerinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInuseFieldNumber = 5,
    kPackageFieldNumber = 4,
    kHpFieldNumber = 1,
    kAttackFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // repeated .Attributeitempro Inuse = 5;
  int inuse_size() const;
  private:
  int _internal_inuse_size() const;
  public:
  void clear_inuse();
  ::Attributeitempro* mutable_inuse(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >*
      mutable_inuse();
  private:
  const ::Attributeitempro& _internal_inuse(int index) const;
  ::Attributeitempro* _internal_add_inuse();
  public:
  const ::Attributeitempro& inuse(int index) const;
  ::Attributeitempro* add_inuse();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >&
      inuse() const;

  // required .Packagepro Package = 4;
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::Packagepro& package() const;
  ::Packagepro* release_package();
  ::Packagepro* mutable_package();
  void set_allocated_package(::Packagepro* package);
  private:
  const ::Packagepro& _internal_package() const;
  ::Packagepro* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::Packagepro* package);
  ::Packagepro* unsafe_arena_release_package();

  // required int32 Hp = 1;
  bool has_hp() const;
  private:
  bool _internal_has_hp() const;
  public:
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Attack = 2;
  bool has_attack() const;
  private:
  bool _internal_has_attack() const;
  public:
  void clear_attack();
  ::PROTOBUF_NAMESPACE_ID::int32 attack() const;
  void set_attack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attack() const;
  void _internal_set_attack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Redisplayerinfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro > inuse_;
  ::Packagepro* package_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 attack_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_Demo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reqest

// required string Name = 1;
inline bool Reqest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reqest::has_name() const {
  return _internal_has_name();
}
inline void Reqest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Reqest::name() const {
  // @@protoc_insertion_point(field_get:Reqest.Name)
  return _internal_name();
}
inline void Reqest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Reqest.Name)
}
inline std::string* Reqest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Reqest.Name)
  return _internal_mutable_name();
}
inline const std::string& Reqest::_internal_name() const {
  return name_.Get();
}
inline void Reqest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Reqest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Reqest.Name)
}
inline void Reqest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Reqest.Name)
}
inline void Reqest::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Reqest.Name)
}
inline std::string* Reqest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Reqest::release_name() {
  // @@protoc_insertion_point(field_release:Reqest.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reqest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Reqest.Name)
}

// required string Password = 2;
inline bool Reqest::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Reqest::has_password() const {
  return _internal_has_password();
}
inline void Reqest::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Reqest::password() const {
  // @@protoc_insertion_point(field_get:Reqest.Password)
  return _internal_password();
}
inline void Reqest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Reqest.Password)
}
inline std::string* Reqest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Reqest.Password)
  return _internal_mutable_password();
}
inline const std::string& Reqest::_internal_password() const {
  return password_.Get();
}
inline void Reqest::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Reqest::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Reqest.Password)
}
inline void Reqest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Reqest.Password)
}
inline void Reqest::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Reqest.Password)
}
inline std::string* Reqest::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Reqest::release_password() {
  // @@protoc_insertion_point(field_release:Reqest.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reqest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Reqest.Password)
}

// required string Message = 3;
inline bool Reqest::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Reqest::has_message() const {
  return _internal_has_message();
}
inline void Reqest::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Reqest::message() const {
  // @@protoc_insertion_point(field_get:Reqest.Message)
  return _internal_message();
}
inline void Reqest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Reqest.Message)
}
inline std::string* Reqest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Reqest.Message)
  return _internal_mutable_message();
}
inline const std::string& Reqest::_internal_message() const {
  return message_.Get();
}
inline void Reqest::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Reqest::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Reqest.Message)
}
inline void Reqest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Reqest.Message)
}
inline void Reqest::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Reqest.Message)
}
inline std::string* Reqest::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Reqest::release_message() {
  // @@protoc_insertion_point(field_release:Reqest.Message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reqest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Reqest.Message)
}

// -------------------------------------------------------------------

// Response

// required int32 Id = 1;
inline bool Response::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response::has_id() const {
  return _internal_has_id();
}
inline void Response::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::id() const {
  // @@protoc_insertion_point(field_get:Response.Id)
  return _internal_id();
}
inline void Response::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Response::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Response.Id)
}

// required string Message = 2;
inline bool Response::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_message() const {
  return _internal_has_message();
}
inline void Response::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:Response.Message)
  return _internal_message();
}
inline void Response::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Response.Message)
}
inline std::string* Response::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Response.Message)
  return _internal_mutable_message();
}
inline const std::string& Response::_internal_message() const {
  return message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Response.Message)
}
inline void Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Response.Message)
}
inline void Response::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Response.Message)
}
inline std::string* Response::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:Response.Message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Response.Message)
}

// -------------------------------------------------------------------

// Dbrequest

// required int32 Operation = 1;
inline bool Dbrequest::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dbrequest::has_operation() const {
  return _internal_has_operation();
}
inline void Dbrequest::clear_operation() {
  operation_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dbrequest::_internal_operation() const {
  return operation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dbrequest::operation() const {
  // @@protoc_insertion_point(field_get:Dbrequest.Operation)
  return _internal_operation();
}
inline void Dbrequest::_internal_set_operation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  operation_ = value;
}
inline void Dbrequest::set_operation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:Dbrequest.Operation)
}

// required int32 Uid = 2;
inline bool Dbrequest::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dbrequest::has_uid() const {
  return _internal_has_uid();
}
inline void Dbrequest::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dbrequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dbrequest::uid() const {
  // @@protoc_insertion_point(field_get:Dbrequest.Uid)
  return _internal_uid();
}
inline void Dbrequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void Dbrequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Dbrequest.Uid)
}

// required int32 Eltemtype = 3;
inline bool Dbrequest::_internal_has_eltemtype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Dbrequest::has_eltemtype() const {
  return _internal_has_eltemtype();
}
inline void Dbrequest::clear_eltemtype() {
  eltemtype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dbrequest::_internal_eltemtype() const {
  return eltemtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dbrequest::eltemtype() const {
  // @@protoc_insertion_point(field_get:Dbrequest.Eltemtype)
  return _internal_eltemtype();
}
inline void Dbrequest::_internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  eltemtype_ = value;
}
inline void Dbrequest::set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eltemtype(value);
  // @@protoc_insertion_point(field_set:Dbrequest.Eltemtype)
}

// required int32 Id = 4;
inline bool Dbrequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Dbrequest::has_id() const {
  return _internal_has_id();
}
inline void Dbrequest::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dbrequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dbrequest::id() const {
  // @@protoc_insertion_point(field_get:Dbrequest.Id)
  return _internal_id();
}
inline void Dbrequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void Dbrequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Dbrequest.Id)
}

// -------------------------------------------------------------------

// Addreq

// required int32 Eltemtype = 1;
inline bool Addreq::_internal_has_eltemtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Addreq::has_eltemtype() const {
  return _internal_has_eltemtype();
}
inline void Addreq::clear_eltemtype() {
  eltemtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_eltemtype() const {
  return eltemtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::eltemtype() const {
  // @@protoc_insertion_point(field_get:Addreq.Eltemtype)
  return _internal_eltemtype();
}
inline void Addreq::_internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  eltemtype_ = value;
}
inline void Addreq::set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eltemtype(value);
  // @@protoc_insertion_point(field_set:Addreq.Eltemtype)
}

// required int32 Value = 2;
inline bool Addreq::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Addreq::has_value() const {
  return _internal_has_value();
}
inline void Addreq::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::value() const {
  // @@protoc_insertion_point(field_get:Addreq.Value)
  return _internal_value();
}
inline void Addreq::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void Addreq::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Addreq.Value)
}

// required int32 Uid = 3;
inline bool Addreq::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Addreq::has_uid() const {
  return _internal_has_uid();
}
inline void Addreq::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::uid() const {
  // @@protoc_insertion_point(field_get:Addreq.Uid)
  return _internal_uid();
}
inline void Addreq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
}
inline void Addreq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Addreq.Uid)
}

// required int32 Id = 4;
inline bool Addreq::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Addreq::has_id() const {
  return _internal_has_id();
}
inline void Addreq::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::id() const {
  // @@protoc_insertion_point(field_get:Addreq.Id)
  return _internal_id();
}
inline void Addreq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void Addreq::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Addreq.Id)
}

// optional bool Usemoney = 5;
inline bool Addreq::_internal_has_usemoney() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Addreq::has_usemoney() const {
  return _internal_has_usemoney();
}
inline void Addreq::clear_usemoney() {
  usemoney_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Addreq::_internal_usemoney() const {
  return usemoney_;
}
inline bool Addreq::usemoney() const {
  // @@protoc_insertion_point(field_get:Addreq.Usemoney)
  return _internal_usemoney();
}
inline void Addreq::_internal_set_usemoney(bool value) {
  _has_bits_[0] |= 0x00000020u;
  usemoney_ = value;
}
inline void Addreq::set_usemoney(bool value) {
  _internal_set_usemoney(value);
  // @@protoc_insertion_point(field_set:Addreq.Usemoney)
}

// optional int32 Pos = 6;
inline bool Addreq::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Addreq::has_pos() const {
  return _internal_has_pos();
}
inline void Addreq::clear_pos() {
  pos_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::pos() const {
  // @@protoc_insertion_point(field_get:Addreq.Pos)
  return _internal_pos();
}
inline void Addreq::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  pos_ = value;
}
inline void Addreq::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:Addreq.Pos)
}

// optional bool Inuse = 7;
inline bool Addreq::_internal_has_inuse() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Addreq::has_inuse() const {
  return _internal_has_inuse();
}
inline void Addreq::clear_inuse() {
  inuse_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Addreq::_internal_inuse() const {
  return inuse_;
}
inline bool Addreq::inuse() const {
  // @@protoc_insertion_point(field_get:Addreq.Inuse)
  return _internal_inuse();
}
inline void Addreq::_internal_set_inuse(bool value) {
  _has_bits_[0] |= 0x00000040u;
  inuse_ = value;
}
inline void Addreq::set_inuse(bool value) {
  _internal_set_inuse(value);
  // @@protoc_insertion_point(field_set:Addreq.Inuse)
}

// optional bool Dropfrom = 8;
inline bool Addreq::_internal_has_dropfrom() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Addreq::has_dropfrom() const {
  return _internal_has_dropfrom();
}
inline void Addreq::clear_dropfrom() {
  dropfrom_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Addreq::_internal_dropfrom() const {
  return dropfrom_;
}
inline bool Addreq::dropfrom() const {
  // @@protoc_insertion_point(field_get:Addreq.Dropfrom)
  return _internal_dropfrom();
}
inline void Addreq::_internal_set_dropfrom(bool value) {
  _has_bits_[0] |= 0x00000080u;
  dropfrom_ = value;
}
inline void Addreq::set_dropfrom(bool value) {
  _internal_set_dropfrom(value);
  // @@protoc_insertion_point(field_set:Addreq.Dropfrom)
}

// repeated int32 Eltemattributetype = 9;
inline int Addreq::_internal_eltemattributetype_size() const {
  return eltemattributetype_.size();
}
inline int Addreq::eltemattributetype_size() const {
  return _internal_eltemattributetype_size();
}
inline void Addreq::clear_eltemattributetype() {
  eltemattributetype_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_eltemattributetype(int index) const {
  return eltemattributetype_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::eltemattributetype(int index) const {
  // @@protoc_insertion_point(field_get:Addreq.Eltemattributetype)
  return _internal_eltemattributetype(index);
}
inline void Addreq::set_eltemattributetype(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  eltemattributetype_.Set(index, value);
  // @@protoc_insertion_point(field_set:Addreq.Eltemattributetype)
}
inline void Addreq::_internal_add_eltemattributetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  eltemattributetype_.Add(value);
}
inline void Addreq::add_eltemattributetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_eltemattributetype(value);
  // @@protoc_insertion_point(field_add:Addreq.Eltemattributetype)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Addreq::_internal_eltemattributetype() const {
  return eltemattributetype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Addreq::eltemattributetype() const {
  // @@protoc_insertion_point(field_list:Addreq.Eltemattributetype)
  return _internal_eltemattributetype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Addreq::_internal_mutable_eltemattributetype() {
  return &eltemattributetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Addreq::mutable_eltemattributetype() {
  // @@protoc_insertion_point(field_mutable_list:Addreq.Eltemattributetype)
  return _internal_mutable_eltemattributetype();
}

// repeated int32 Eltemattributevalue = 10;
inline int Addreq::_internal_eltemattributevalue_size() const {
  return eltemattributevalue_.size();
}
inline int Addreq::eltemattributevalue_size() const {
  return _internal_eltemattributevalue_size();
}
inline void Addreq::clear_eltemattributevalue() {
  eltemattributevalue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_eltemattributevalue(int index) const {
  return eltemattributevalue_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::eltemattributevalue(int index) const {
  // @@protoc_insertion_point(field_get:Addreq.Eltemattributevalue)
  return _internal_eltemattributevalue(index);
}
inline void Addreq::set_eltemattributevalue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  eltemattributevalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:Addreq.Eltemattributevalue)
}
inline void Addreq::_internal_add_eltemattributevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  eltemattributevalue_.Add(value);
}
inline void Addreq::add_eltemattributevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_eltemattributevalue(value);
  // @@protoc_insertion_point(field_add:Addreq.Eltemattributevalue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Addreq::_internal_eltemattributevalue() const {
  return eltemattributevalue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Addreq::eltemattributevalue() const {
  // @@protoc_insertion_point(field_list:Addreq.Eltemattributevalue)
  return _internal_eltemattributevalue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Addreq::_internal_mutable_eltemattributevalue() {
  return &eltemattributevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Addreq::mutable_eltemattributevalue() {
  // @@protoc_insertion_point(field_mutable_list:Addreq.Eltemattributevalue)
  return _internal_mutable_eltemattributevalue();
}

// -------------------------------------------------------------------

// Addres

// required int32 Ack = 1;
inline bool Addres::_internal_has_ack() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Addres::has_ack() const {
  return _internal_has_ack();
}
inline void Addres::clear_ack() {
  ack_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addres::_internal_ack() const {
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addres::ack() const {
  // @@protoc_insertion_point(field_get:Addres.Ack)
  return _internal_ack();
}
inline void Addres::_internal_set_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  ack_ = value;
}
inline void Addres::set_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:Addres.Ack)
}

// -------------------------------------------------------------------

// Packagereq

// required int32 Uid = 1;
inline bool Packagereq::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Packagereq::has_uid() const {
  return _internal_has_uid();
}
inline void Packagereq::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packagereq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packagereq::uid() const {
  // @@protoc_insertion_point(field_get:Packagereq.Uid)
  return _internal_uid();
}
inline void Packagereq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  uid_ = value;
}
inline void Packagereq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Packagereq.Uid)
}

// required int32 Init = 2;
inline bool Packagereq::_internal_has_init() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Packagereq::has_init() const {
  return _internal_has_init();
}
inline void Packagereq::clear_init() {
  init_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packagereq::_internal_init() const {
  return init_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packagereq::init() const {
  // @@protoc_insertion_point(field_get:Packagereq.Init)
  return _internal_init();
}
inline void Packagereq::_internal_set_init(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  init_ = value;
}
inline void Packagereq::set_init(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:Packagereq.Init)
}

// -------------------------------------------------------------------

// Packageres

// repeated int32 Num = 1;
inline int Packageres::_internal_num_size() const {
  return num_.size();
}
inline int Packageres::num_size() const {
  return _internal_num_size();
}
inline void Packageres::clear_num() {
  num_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packageres::_internal_num(int index) const {
  return num_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packageres::num(int index) const {
  // @@protoc_insertion_point(field_get:Packageres.Num)
  return _internal_num(index);
}
inline void Packageres::set_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packageres.Num)
}
inline void Packageres::_internal_add_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  num_.Add(value);
}
inline void Packageres::add_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_num(value);
  // @@protoc_insertion_point(field_add:Packageres.Num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Packageres::_internal_num() const {
  return num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Packageres::num() const {
  // @@protoc_insertion_point(field_list:Packageres.Num)
  return _internal_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Packageres::_internal_mutable_num() {
  return &num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Packageres::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:Packageres.Num)
  return _internal_mutable_num();
}

// -------------------------------------------------------------------

// Attributeitempro

// required int32 Id = 1;
inline bool Attributeitempro::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Attributeitempro::has_id() const {
  return _internal_has_id();
}
inline void Attributeitempro::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::id() const {
  // @@protoc_insertion_point(field_get:Attributeitempro.Id)
  return _internal_id();
}
inline void Attributeitempro::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Attributeitempro::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Attributeitempro.Id)
}

// required int32 Amount = 2;
inline bool Attributeitempro::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Attributeitempro::has_amount() const {
  return _internal_has_amount();
}
inline void Attributeitempro::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::amount() const {
  // @@protoc_insertion_point(field_get:Attributeitempro.Amount)
  return _internal_amount();
}
inline void Attributeitempro::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  amount_ = value;
}
inline void Attributeitempro::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Attributeitempro.Amount)
}

// required int32 Eltemtype = 3;
inline bool Attributeitempro::_internal_has_eltemtype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Attributeitempro::has_eltemtype() const {
  return _internal_has_eltemtype();
}
inline void Attributeitempro::clear_eltemtype() {
  eltemtype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::_internal_eltemtype() const {
  return eltemtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::eltemtype() const {
  // @@protoc_insertion_point(field_get:Attributeitempro.Eltemtype)
  return _internal_eltemtype();
}
inline void Attributeitempro::_internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  eltemtype_ = value;
}
inline void Attributeitempro::set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eltemtype(value);
  // @@protoc_insertion_point(field_set:Attributeitempro.Eltemtype)
}

// repeated int32 attribute = 4;
inline int Attributeitempro::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Attributeitempro::attribute_size() const {
  return _internal_attribute_size();
}
inline void Attributeitempro::clear_attribute() {
  attribute_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::attribute(int index) const {
  // @@protoc_insertion_point(field_get:Attributeitempro.attribute)
  return _internal_attribute(index);
}
inline void Attributeitempro::set_attribute(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:Attributeitempro.attribute)
}
inline void Attributeitempro::_internal_add_attribute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_.Add(value);
}
inline void Attributeitempro::add_attribute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attribute(value);
  // @@protoc_insertion_point(field_add:Attributeitempro.attribute)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Attributeitempro::_internal_attribute() const {
  return attribute_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Attributeitempro::attribute() const {
  // @@protoc_insertion_point(field_list:Attributeitempro.attribute)
  return _internal_attribute();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Attributeitempro::_internal_mutable_attribute() {
  return &attribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Attributeitempro::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:Attributeitempro.attribute)
  return _internal_mutable_attribute();
}

// -------------------------------------------------------------------

// Packagepro

// repeated .Attributeitempro Itempro = 1;
inline int Packagepro::_internal_itempro_size() const {
  return itempro_.size();
}
inline int Packagepro::itempro_size() const {
  return _internal_itempro_size();
}
inline void Packagepro::clear_itempro() {
  itempro_.Clear();
}
inline ::Attributeitempro* Packagepro::mutable_itempro(int index) {
  // @@protoc_insertion_point(field_mutable:Packagepro.Itempro)
  return itempro_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >*
Packagepro::mutable_itempro() {
  // @@protoc_insertion_point(field_mutable_list:Packagepro.Itempro)
  return &itempro_;
}
inline const ::Attributeitempro& Packagepro::_internal_itempro(int index) const {
  return itempro_.Get(index);
}
inline const ::Attributeitempro& Packagepro::itempro(int index) const {
  // @@protoc_insertion_point(field_get:Packagepro.Itempro)
  return _internal_itempro(index);
}
inline ::Attributeitempro* Packagepro::_internal_add_itempro() {
  return itempro_.Add();
}
inline ::Attributeitempro* Packagepro::add_itempro() {
  // @@protoc_insertion_point(field_add:Packagepro.Itempro)
  return _internal_add_itempro();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >&
Packagepro::itempro() const {
  // @@protoc_insertion_point(field_list:Packagepro.Itempro)
  return itempro_;
}

// -------------------------------------------------------------------

// Redisplayerinfo

// required int32 Hp = 1;
inline bool Redisplayerinfo::_internal_has_hp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Redisplayerinfo::has_hp() const {
  return _internal_has_hp();
}
inline void Redisplayerinfo::clear_hp() {
  hp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Redisplayerinfo::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Redisplayerinfo::hp() const {
  // @@protoc_insertion_point(field_get:Redisplayerinfo.Hp)
  return _internal_hp();
}
inline void Redisplayerinfo::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  hp_ = value;
}
inline void Redisplayerinfo::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Redisplayerinfo.Hp)
}

// required int32 Attack = 2;
inline bool Redisplayerinfo::_internal_has_attack() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Redisplayerinfo::has_attack() const {
  return _internal_has_attack();
}
inline void Redisplayerinfo::clear_attack() {
  attack_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Redisplayerinfo::_internal_attack() const {
  return attack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Redisplayerinfo::attack() const {
  // @@protoc_insertion_point(field_get:Redisplayerinfo.Attack)
  return _internal_attack();
}
inline void Redisplayerinfo::_internal_set_attack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  attack_ = value;
}
inline void Redisplayerinfo::set_attack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Redisplayerinfo.Attack)
}

// required int32 Id = 3;
inline bool Redisplayerinfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Redisplayerinfo::has_id() const {
  return _internal_has_id();
}
inline void Redisplayerinfo::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Redisplayerinfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Redisplayerinfo::id() const {
  // @@protoc_insertion_point(field_get:Redisplayerinfo.Id)
  return _internal_id();
}
inline void Redisplayerinfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void Redisplayerinfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Redisplayerinfo.Id)
}

// required .Packagepro Package = 4;
inline bool Redisplayerinfo::_internal_has_package() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || package_ != nullptr);
  return value;
}
inline bool Redisplayerinfo::has_package() const {
  return _internal_has_package();
}
inline void Redisplayerinfo::clear_package() {
  if (package_ != nullptr) package_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Packagepro& Redisplayerinfo::_internal_package() const {
  const ::Packagepro* p = package_;
  return p != nullptr ? *p : reinterpret_cast<const ::Packagepro&>(
      ::_Packagepro_default_instance_);
}
inline const ::Packagepro& Redisplayerinfo::package() const {
  // @@protoc_insertion_point(field_get:Redisplayerinfo.Package)
  return _internal_package();
}
inline void Redisplayerinfo::unsafe_arena_set_allocated_package(
    ::Packagepro* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Redisplayerinfo.Package)
}
inline ::Packagepro* Redisplayerinfo::release_package() {
  _has_bits_[0] &= ~0x00000001u;
  ::Packagepro* temp = package_;
  package_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Packagepro* Redisplayerinfo::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:Redisplayerinfo.Package)
  _has_bits_[0] &= ~0x00000001u;
  ::Packagepro* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::Packagepro* Redisplayerinfo::_internal_mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::Packagepro>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::Packagepro* Redisplayerinfo::mutable_package() {
  // @@protoc_insertion_point(field_mutable:Redisplayerinfo.Package)
  return _internal_mutable_package();
}
inline void Redisplayerinfo::set_allocated_package(::Packagepro* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:Redisplayerinfo.Package)
}

// repeated .Attributeitempro Inuse = 5;
inline int Redisplayerinfo::_internal_inuse_size() const {
  return inuse_.size();
}
inline int Redisplayerinfo::inuse_size() const {
  return _internal_inuse_size();
}
inline void Redisplayerinfo::clear_inuse() {
  inuse_.Clear();
}
inline ::Attributeitempro* Redisplayerinfo::mutable_inuse(int index) {
  // @@protoc_insertion_point(field_mutable:Redisplayerinfo.Inuse)
  return inuse_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >*
Redisplayerinfo::mutable_inuse() {
  // @@protoc_insertion_point(field_mutable_list:Redisplayerinfo.Inuse)
  return &inuse_;
}
inline const ::Attributeitempro& Redisplayerinfo::_internal_inuse(int index) const {
  return inuse_.Get(index);
}
inline const ::Attributeitempro& Redisplayerinfo::inuse(int index) const {
  // @@protoc_insertion_point(field_get:Redisplayerinfo.Inuse)
  return _internal_inuse(index);
}
inline ::Attributeitempro* Redisplayerinfo::_internal_add_inuse() {
  return inuse_.Add();
}
inline ::Attributeitempro* Redisplayerinfo::add_inuse() {
  // @@protoc_insertion_point(field_add:Redisplayerinfo.Inuse)
  return _internal_add_inuse();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >&
Redisplayerinfo::inuse() const {
  // @@protoc_insertion_point(field_list:Redisplayerinfo.Inuse)
  return inuse_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Demo_2eproto
